1.
0x0000000000547920 <arith_driver+336>:data.c:2661
lea    0x2(,%rbp,4),%rax	rbp = 0xdfffffffdceaced0

left shifting will cause the overflow

2.
in data.c

DEFVAR_LISP ("most-positive-fixnum", Vmost_positive_fixnum,
               doc: /* The largest value that is representable in a Lisp intege\
r.  */);
  Vmost_positive_fixnum = make_number (MOST_POSITIVE_FIXNUM);
  XSYMBOL (intern_c_string ("most-positive-fixnum"))->constant = 1;

  DEFVAR_LISP ("most-negative-fixnum", Vmost_negative_fixnum,
               doc: /* The smallest value that is representable in a Lisp integ\
er.  */);
  Vmost_negative_fixnum = make_number (MOST_NEGATIVE_FIXNUM);
  XSYMBOL (intern_c_string ("most-negative-fixnum"))->constant = 1;
}

also in the lisp.h
we can find the definition
#define MOST_POSITIVE_FIXNUM (EMACS_INT_MAX >> INTTYPEBITS)
INTTYPEBITS == 2
we shift the EMACS_INT_MAX = 0x7fffffffffffffff 
so actually it computes the value
(2^63 - 1) >> 2 = 2305843009213693951

3.
in data.c the function will return INTMASK if multiplication
overflows.
As it is defined in lisp.h
INTMASK is (EMACS_INT_MAX >> (INTTYPEBITS - 1))
so the INTMASK is 0x3fffffffffffffff
Since is wrapv so the result is 0xc000000000000001
0xc000000000000001and with 0x3fffffffffffffff
the result is 0x1

4.
If it is run with -fwrapv will allow overflow
So the compiler will not check overflow.
It will cause arithmatically incorrect result

5.
I use the command run 
Starting program: /w/fac.2/cs/eggert/bin64/bin/emacs-25.2 -Q -batch -eval '(print (format-time-string "%Y-                                                                                                                                   %m-%d %H:%M:%S %Z" nil (concat (make-string 1000 ?X) "0")))'
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
[New Thread 0x7fffe3174700 (LWP 30395)]

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff173949b in __strcpy_sse2_unaligned () from /lib64/libc.so.6

and I use the backtrace to trace this file.
I got many instructions
#0  0x00007ffff173949b in __strcpy_sse2_unaligned () from /lib64/libc.so.6
#1  0x00000000005558f2 in emacs_setenv_TZ (
    tzstring=0x14834a9 'X' <repeats 135 times>, "T", 'X' <repeats 64 times>...) at editfns.c:2428
#2  0x00000000005d7f28 in change_env (tz=0x14834a0) at time_rz.c:223
#3  revert_tz (tz=tz@entry=0x14834a0) at time_rz.c:268
#4  0x00000000005d82bc in localtime_rz (tz=0x14830a0, t=0x7fffffffc858, tm=0x7fffffffd840)
    at time_rz.c:289
#5  0x000000000055632a in emacs_localtime_rz (tm=0x7fffffffc820, t=0x7fffffffc858, tz=<optimized out>)
    at editfns.c:107
#6  format_time_string (format=0x1475038 "%Y-%m-%d %H:%M:%S %Z", formatlen=20, t=...,
    zone=zone@entry=21507604, tmp=tmp@entry=0x7fffffffd840) at editfns.c:2070
#7  0x0000000000556582 in Fformat_time_string (format_string=<optimized out>, timeval=<optimized out>,
    zone=21507604) at editfns.c:2049
#8  0x000000000055ac25 in eval_sub (form=<optimized out>) at eval.c:2178
#9  0x000000000055aa34 in eval_sub (form=form@entry=17131587) at eval.c:2160
#10 0x000000000055df7c in Feval (form=17131587, lexical=<optimized out>) at eval.c:1994
#11 0x000000000055b76a in Ffuncall (nargs=2, args=args@entry=0x7fffffffdb30) at eval.c:2702
#12 0x000000000058e53b in exec_byte_code (bytestr=<optimized out>, vector=<optimized out>,
    maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=1, args=<optimized out>,
    args@entry=0x7fffffffdb30) at bytecode.c:880
#13 0x000000000055b2e6 in funcall_lambda (fun=9908148, nargs=nargs@entry=1, arg_vector=0x7fffffffdb30,
    arg_vector@entry=0x7fffffffdcd0) at eval.c:2863
#14 0x000000000055b59b in Ffuncall (nargs=2, args=args@entry=0x7fffffffdcc8) at eval.c:2760

and I try the command si
handle_sigsegv (sig=11, siginfo=0xb7b5f0 <sigsegv_stack+7184>, arg=0xb7b4c0 <sigsegv_stack+6880>) at sysdep.c:1687
1687      if (!fatal && !pthread_equal (pthread_self (), main_thread))
