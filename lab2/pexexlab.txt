Part1

gdb ~eggert/bin64/bin/emacs-25.2
open gdb debugger

break Ftimes
Set breakpoint before

set disassemble-next-line on
to turn the fnction on
Each time GDB is stopped at a breakpoint or after executing a step it will display the next source line followed by the disassembly of it

set logging on
Copying output to gdb.txt.

disas /m Ftimes

Dump of assembler code for function Ftimes:

r -Q -batch -eval '(print (* 1250284240 -1844255039))'
to start debugging.

info register $rsi
rsi            0x7fffffffd8d0   140737488345296
to get the register rsi address

info register $rdx
rdx            0x0      0
to get the register rdx address

si
to go to next instructions

I got many assembly instructions

0x0000000000547ad3 <Ftimes+3>:       48 89 fe        mov    %rdi,%rsi
0x0000000000547ad6 <Ftimes+6>:       bf 02 00 00 00  mov    $0x2,%edi
0x0000000000547adb <Ftimes+11>:      e9 f0 fc ff ff  jmpq   0x5477d0 <arith_driver>


use the method above to find all the instruction.
until the retq
there are totally 90 lines

Part2.

emacs lab2.c
to creat a file and copy the source file in it.
_Bool
  testovf (long n)
  {
    return n + 9223372036854775807 < n;
  }
C-x C-c y Enter

and use the gcc -O2 -S lab2.c to create the lab2.s file 
and use the emacs to open that file.

change the command as gcc -O2 -fwrapv -S lab2.c
and gcc -O2 -fsanitize=undefined -S lab2.c

emacs testovf.txt to create the file to record.

compare all those three files and write the difference in the
testovf.txt

Part 3
emacs answers.txt
to creat the answer file.

emacs ~eggert/src/emacs-25.2/src/data.c
open the data.c file

use the basic the emacs command to go through file

emacs ~eggert/src/emacs-25.2/src/lisp.h
open the lisp.h file
also go through the file.

gdb ~eggert/bin64/bin/emacs-25.2
open the gdb debugger

r -Q -batch -eval '(print (format-time-string "%Y-%m-%d %H:%M:%S %Z"
nil (concat (make-string 1000 ?X) "0")))'

as the instruction in the problem.

(gdb) backtrace
use the backtrace emtire file

