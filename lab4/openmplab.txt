1

I downloaded the lab source code and put it onto lnxsrv

2
$ make seq
mahe the executable of that program

gcc -o seq  -O3 filter.c main.c func.c util.c -lm

$ ./seq

FUNC TIME : 0.502442
TOTAL TIME : 2.524267

So the 0.502442 is the base case.

3
$ make seq GPROF=1
gcc -o seq  -O2 -pg filter.c main.c func.c util.c -lm

$ ./seq
FUNC TIME : 0.567149
TOTAL TIME : 2.473719

$ gprof seq | less
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  ms/call  ms/call  name
 51.74      0.31     0.31       15    20.69    23.23  func1
 33.38      0.51     0.20  5177344     0.00     0.00  rand2
  5.01      0.54     0.03   491520     0.00     0.00  findIndexBin
  3.34      0.56     0.02                             filter
  3.34      0.58     0.02                             sequence
  1.67      0.59     0.01       15     0.67     0.67  func2
  1.67      0.60     0.01        1    10.01    10.01  imdilateDisk
  0.00      0.60     0.00   983042     0.00     0.00  round
  0.00      0.60     0.00       16     0.00     0.00  dilateMatrix
  0.00      0.60     0.00       15     0.00     0.00  func3
  0.00      0.60     0.00       15     0.00     0.00  func4
  0.00      0.60     0.00       15     0.00     2.00  func5
  0.00      0.60     0.00       15     0.00     0.00  rand1
  0.00      0.60     0.00        2     0.00     0.00  get_time
  0.00      0.60     0.00        1     0.00   162.24  addSeed
  0.00      0.60     0.00        1     0.00     0.00  elapsed_time
  0.00      0.60     0.00        1     0.00     0.00  fillMatrix
  0.00      0.60     0.00        1     0.00     0.00  func0
  0.00      0.60     0.00        1     0.00     0.00  getNeighbors

func1 takes more time than other functions.


4

I modified some functions. I added the multithread and parallelism to
some functions. Before each loop I added something like.

"#pragma omp parallel for num_threads(30) default(shared) private (i) "
Also changed some inplementation of the functions.
and checked the speed up.

$ make clean
$ make omp
$ ./omp

FUNC TIME : 0.038178
TOTAL TIME : 1.898200

The speedup rate is 0.502/ 0.038178 = 13.15

5 After I check the speedup, I checked the correctess of output

$ make check
gcc -o omp  -O3 -fopenmp filter.c main.c func.c util.c -lm
cp omp filter

./filter
FUNC TIME : 0.038692
TOTAL TIME : 1.869409
diff --brief correct.txt output.txt

Also I checked the memory leak
$ make omp MTRACE=1
gcc -o omp  -O3 -DMTRACE -fopenmp filter.c main.c func.c util.c -lm
[qiusi@lnxsrv07 ~/lab4/openmplab]$ ./omp
FUNC TIME : 0.045862
TOTAL TIME : 2.065691
[qiusi@lnxsrv07 ~/lab4/openmplab]$ make checkmem
mtrace filter mtrace.out || true

Memory not freed:
-----------------
           Address     Size     Caller
0x0000000001fa4060   0x1e90  at 0x7feb71ff7869
0x0000000001fa5f00     0xc0  at 0x7feb71ff7869
0x0000000001fa5fd0     0xf8  at 0x7feb71ff78b9
0x0000000001fa60d0    0x240  at 0x7feb72527c25
0x0000000001fa6320    0x240  at 0x7feb72527c25
0x0000000001fa6570    0x240  at 0x7feb72527c25
0x0000000001fa67c0    0x240  at 0x7feb72527c25
0x0000000001fa6a10    0x240  at 0x7feb72527c25
0x0000000001fa6c60    0x240  at 0x7feb72527c25
0x0000000001fa6eb0    0x240  at 0x7feb72527c25
0x0000000001fa7100    0x240  at 0x7feb72527c25
0x0000000001fa7350    0x240  at 0x7feb72527c25
0x0000000001fa75a0    0x240  at 0x7feb72527c25
0x0000000001fa77f0    0x240  at 0x7feb72527c25
0x0000000001fa7a40    0x240  at 0x7feb72527c25
0x0000000001fa7c90    0x240  at 0x7feb72527c25
0x0000000001fa7ee0    0x240  at 0x7feb72527c25
0x0000000001fa8130    0x240  at 0x7feb72527c25
0x0000000001fa8380    0x240  at 0x7feb72527c25
0x0000000001fa85d0    0x240  at 0x7feb72527c25
0x0000000001fa8820    0x240  at 0x7feb72527c25
0x0000000001fa8a70    0x240  at 0x7feb72527c25
0x0000000001fa8cc0    0x240  at 0x7feb72527c25
0x0000000001fa8f10    0x240  at 0x7feb72527c25
0x0000000001fa9160    0x240  at 0x7feb72527c25
0x0000000001fa93b0    0x240  at 0x7feb72527c25
0x0000000001fa9600    0x240  at 0x7feb72527c25
0x0000000001fa9850    0x240  at 0x7feb72527c25
0x0000000001fa9aa0    0x240  at 0x7feb72527c25
0x0000000001fa9cf0    0x240  at 0x7feb72527c25
0x0000000001fa9f40    0x240  at 0x7feb72527c25
0x0000000001faa190    0x240  at 0x7feb72527c25

Finally I check the format expand func.c openmplab.txt |
  awk '/\r/ || 200 < length'

Which is fine.

Overall the speed is increased 13.15 times
